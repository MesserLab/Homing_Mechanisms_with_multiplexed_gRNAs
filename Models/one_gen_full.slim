
// Author: Sam Champer and Isabel Kim.
// Created in association with Jackson Champer and the Messer lab.

// A framework for simulating many different gene drives
// with varying parameters, intended to be configured by
// alterning the heading below, or by dynamically varying
// values in the header using an associated Python file.

// This version starts with two individuals:
// one of whom is a heterozygous female by default
// or male if the MALE_ONLY_DROP parameter is set to true,
// and generates CAPACITY offspring. Note that some of the 
// parameters are not used in this model.

initialize() {
    // Fitness parameters:
    defineConstant("DRIVE_FITNESS_VALUE", 0.9);
    defineConstant("GENE_DISRUPTION_DRIVE_FITNESS_MULTIPLIER", 0.95);
    defineConstant("R2_FITNESS_VALUE", 1.0);

    // Drive type:
    defineConstant("HOMING_DRIVE", T);
    defineConstant("HAPLOLETHAL_DRIVE", F);
    defineConstant("RECESSIVE_LETHAL_DRIVE", F);
    defineConstant("GENE_DISRUPTION_DRIVE", F);
    defineConstant("RECESSIVE_FEMALE_STERILE_SUPPRESSION_DRIVE", F);
    defineConstant("HAPLOLETHAL_SUPPRESSION_DRIVE", F);
    defineConstant("MODIFICATION_TADS_DRIVE", F);  // r2/r2 males are sterile; nonhoming.
    defineConstant("TADS_AUTOSOMAL_SUPPRESSION_DRIVE", F);  // r2/r2 males AND d/d males are sterile; nonhoming.

    // Resistance phase parameters:
    defineConstant("NUM_CUT_PHASES", 3);
    defineConstant("GERMLINE_RESISTANCE_CUT_RATE", 0.02);
    defineConstant("LATE_GERMLINE_RESISTANCE_CUT_RATE", 0.9);
    defineConstant("EMBRYO_RESISTANCE_CUT_RATE", 0.05);
    defineConstant("HET_MOTHER_CAS_INHERITANCE", 1.83);
    defineConstant("R1_OCCURRENCE_RATE", 0.1);

    // HDR phase parameters:
    defineConstant("HOMING_PHASE_CUT_RATE", 0.98);
    defineConstant("HOMING_EDGE_EFFECT", 0.055);
    defineConstant("BASELINE_HOMING_SUCCESS_RATE", 0.95);
    defineConstant("PARTIAL_HDR_RATE", 0.1);
    defineConstant("PER_OFFSET_PARTIAL_HDR_RATE_INCREASE", 0.1);
    defineConstant("PARTIAL_HDR_R1_RATE", 0.001);

    // General drive parameters:
    defineConstant("NUM_GRNAS", 2);
    defineConstant("GRNA_ACTIVITY_VARIATION", 0.2);
    defineConstant("GLOBAL_SATURATION_FACTOR", 1.5); // Has no effect when set to 2.
    defineConstant("X_LINKED_DRIVE", F);
    defineConstant("MALE_ONLY_PROMOTER", F);
    defineConstant("GRNA_SATURATION_SIMULATED", T);

    // Ecology and drop parameters:
    defineConstant("CAPACITY", 100000);
    defineConstant("DROP_SIZE", 1000);
    defineConstant("MAX_ATTEMPTS_TO_FIND_SUITABLE_MATE", 10);
    defineConstant("LOW_DENSITY_GROWTH_RATE", 10);
    defineConstant("MAX_OFFSPRING", 50);
    defineConstant("RATE_FEMALES_SURVIVE", 0.0);  // For partially overlapping generations.
    defineConstant("MALE_ONLY_DROP", F);
    defineConstant("FEMALE_ONLY_DROP", F);
    defineConstant("HETEROZYGOUS_DROP", T);
    // End config params.

    // Calculate activity step between each gRNA.
    if (NUM_GRNAS == 1)
        defineConstant("GRNA_ACTIVITY_STEP", 0);
    else
        defineConstant("GRNA_ACTIVITY_STEP", (2 * GRNA_ACTIVITY_VARIATION)  / (NUM_GRNAS - 1));

    // This simulation will use a non-Wright-Fisher model.
    initializeSLiMModelType("nonWF");

    // Four variations: Wild type, drive, r1 resistance, r2 resistance.
    // 'cut' is a temporary placeholder, and 'gap' represents a missing segment.
    wt = initializeMutationType("m1", 0.5, "f", 0.0);
    dr = initializeMutationType("m2", 0.5, "f", 0.0);
    r1 = initializeMutationType("m3", 0.5, "f", 0.0);
    r2 = initializeMutationType("m4", 0.5, "f", 0.0);
    cut = initializeMutationType("m5", 0.5, "f", 0.0);
    gap = initializeMutationType("m6", 0.5, "f", 0.0);
    variations = c(wt, dr, r1, r2, cut, gap);

    // Variations are all part of g1 genome element.
    initializeGenomicElementType("g1", variations, c(1, 1, 1, 1, 1, 1));

    // Element is NUM_GRNAS long, each spot on the element representing a GRNA target location.
    initializeGenomicElement(g1, 0, NUM_GRNAS - 1);

    // These variations overwrite one another.
    variations.mutationStackPolicy = "l";
    variations.mutationStackGroup = 1;

    // No mutation in this model.
    initializeMutationRate(0.0);
    initializeRecombinationRate(0.0);

    // Simulate sexual reproduction: A for autosome.
    initializeSex("A");
}

//// HELPER FUNCTION FOR FORMING A RESISTANCE ALLELE AT A GIVEN LOCUS.
function (void)addResistanceAllele(o<Genome>$ genome, i$ locus) {
    // Resistance alleles form at a specified rate.
    // m3 is R1 allele, m4 is R2.
    if(runif(1) < R1_OCCURRENCE_RATE)
        genome.addNewDrawnMutation(m3, locus);
    else
        genome.addNewDrawnMutation(m4, locus);
}

//// FUNCTION FOR CAS9 EFFECTS IN THE GERMLINE.
function (void)germline(o<Genome>$ child_chromosome, o<Individual>$ parent, f$ resistance_rate) {
    // Determine presence of drive in this parent.
    parent_drive_count = sum(parent.genomes.countOfMutationsOfType(m2) == NUM_GRNAS);
    // If parent doesn't have drive allele, nothing happens in germline.
    if (!parent_drive_count)
        return;

    // Chromosome must have wt to cut, or nothing happens.
    if (child_chromosome.countOfMutationsOfType(m1) == 0)
        return;

    // Using the resistance rate passed to the function,
    // determine the per phase cut rate.
    grna_factor = 1;
    if (GRNA_SATURATION_SIMULATED)
        grna_factor = NUM_GRNAS;

    // This model allows for varying rates of cutting at each locus.
    // Therefore, the cut rate is a vector of rates.
    cas_factor = GLOBAL_SATURATION_FACTOR * grna_factor / (GLOBAL_SATURATION_FACTOR - 1 + grna_factor);
    local_cas_factor = cas_factor * (1 + GRNA_ACTIVITY_VARIATION);
    local_cut_rate = 1 - (1 - resistance_rate)^(local_cas_factor / (NUM_CUT_PHASES * grna_factor));
    // The above cut rate is the first rate in the vector.
    cut_rates = local_cut_rate;
    // Now fill in the rest of the vector.
    for (i in seqLen(NUM_GRNAS - 1)) {
        local_cas_factor = cas_factor * (1 + GRNA_ACTIVITY_VARIATION - (i + 1) * GRNA_ACTIVITY_STEP);
        local_cut_rate = 1 - (1 - resistance_rate)^(local_cas_factor / (NUM_CUT_PHASES * grna_factor));
        // Concatenate the previous vector with the next cut rate calculated:
        cut_rates = c(cut_rates, local_cut_rate);
    }

    // Determine if cas9 cuts the chromosome in the germline.
    casCut(child_chromosome, cut_rates);
}

//// FUNCTION FOR CAS9 EFFECTS IN EMBRYO.
function (void)embryo(o<Genome>$ child_chromosome_1, o<Genome>$ child_chromosome_2, o<Individual>$ mother) {
    // Determine presence of drive in this mother.
    mother_drive_count = sum(mother.genomes.countOfMutationsOfType(m2) == NUM_GRNAS);
    // If mother doesn't have drive allele, nothing happens in embryo.
    if (!mother_drive_count)
        return;

    // Determine the per phase cut rate.
    if (HOMING_DRIVE & sum(mother.genomes.countOfMutationsOfType(m1) == NUM_GRNAS) == 1)
        // Special case for homing drive individual that is dr/wt based on experimental data.
        mother_drive_count = HET_MOTHER_CAS_INHERITANCE;
    grna_factor = 1;
    if (GRNA_SATURATION_SIMULATED)
        grna_factor = NUM_GRNAS;

    // This model allows for varying rates of cutting at each locus.
    // Therefore, the cut rate is a vector of rates.
    cas_factor = GLOBAL_SATURATION_FACTOR * grna_factor / (GLOBAL_SATURATION_FACTOR - 1 + grna_factor);
    local_cas_factor = cas_factor * (1 + GRNA_ACTIVITY_VARIATION);
    local_cut_rate = 1 - (1 - EMBRYO_RESISTANCE_CUT_RATE)^(mother_drive_count * local_cas_factor / (NUM_CUT_PHASES * grna_factor));
    cut_rates = local_cut_rate;
    // Now fill in the rest of the vector.
    for (i in seqLen(NUM_GRNAS - 1)) {
        local_cas_factor = cas_factor * (1 + GRNA_ACTIVITY_VARIATION - (i + 1) * GRNA_ACTIVITY_STEP);
        local_cut_rate = 1 - (1 - EMBRYO_RESISTANCE_CUT_RATE)^(mother_drive_count * local_cas_factor / (NUM_CUT_PHASES * grna_factor));
        // Concatenate the previous vector with the next cut rate calculated:
        cut_rates = c(cut_rates, local_cut_rate);
    }

    // Then pass the rates as an argument to the casCut funtion to
    // determine if cas9 cuts in the embryo for each chromosome.
    casCut(child_chromosome_1, cut_rates);
    casCut(child_chromosome_2, cut_rates);
}

//// FUNCTION FOR CAS9 CUTTING A TARGET CHROMOSOME.
function (void)casCut(o<Genome>$ chromosome, f cut_rates) {
    // If chromosome has no wild type targets to cut, cas9 does nothing.
    if (chromosome.countOfMutationsOfType(m1) == 0)
        return;

    // Vector of possible loci for cas9 to cut:
    wt_loci = chromosome.positionsOfMutationsOfType(m1);

    // In each cut phase...
    for (i in seqLen(NUM_CUT_PHASES)) {
        // At each possible locus...
        for (j in seqAlong(wt_loci)) {
            // Check to see if cas9 cuts...
            if (runif(1) < cut_rates[j]) {
                // Convert the locus temporarily to an m5,
                // representing that this site is being cut.
                chromosome.addNewDrawnMutation(m5, wt_loci[j]);
            }
        }
        // If any cuts were made...
        if (chromosome.countOfMutationsOfType(m5)) {
            cut_loci = chromosome.positionsOfMutationsOfType(m5);
            // If just one cut is made, create an R1 or R2 resistance allele.
            if (chromosome.countOfMutationsOfType(m5) == 1)
                addResistanceAllele(chromosome, cut_loci[0]);
            else {
                // If mutlple cuts are made in the same cut phase, loss of
                // function results. Convert leftmost site to m4 (R2) and
                // everthing else through the rightmost site to m6 (cut).
                number_of_cuts = cut_loci[size(cut_loci) - 1] - cut_loci[0];
                for (index in seqLen(number_of_cuts))
                    chromosome.addNewDrawnMutation(m6, cut_loci[0] + index + 1);
                chromosome.addNewDrawnMutation(m4, cut_loci[0]);
            }
            // Because some wt loci may have been cut out of the
            // chromosome, remake the vector of possible cut sites
            // to use during the next iteration of the for loop:
            if (chromosome.countOfMutationsOfType(m1) == 0)
                return;
            wt_loci = chromosome.positionsOfMutationsOfType(m1);
        }
    }
}

//// FUNCTION FOR SIMULATING HOMOLOGY DIRECTED REPAIR.
function (void)hdr(o<Genome>$ chromosome, o<Individual>$ parent) {
    // If chromosome has no wild type targets to cut, cas9 does nothing.
    if (chromosome.countOfMutationsOfType(m1) == 0)
        return;
    // Determine presence of drive in this parent.
    parent_c1_drive = parent.genome1.countOfMutationsOfType(m2) == NUM_GRNAS;
    parent_c2_drive = parent.genome2.countOfMutationsOfType(m2) == NUM_GRNAS;
    parent_has_drive = parent_c1_drive | parent_c2_drive;
    // If parent doesn't have drive allele, nothing happens in germline.
    if (!parent_has_drive)
        return;

    // Rate of cutting during hdr, modified by gRNA saturation and variable cutting activity, if toggled on.
    // This model allows for varying rates of cutting at each locus.
    grna_factor = 1;
    if (GRNA_SATURATION_SIMULATED)
        grna_factor = NUM_GRNAS;
    cas_factor = GLOBAL_SATURATION_FACTOR * grna_factor / (GLOBAL_SATURATION_FACTOR - 1 + grna_factor);
    local_cas_factor = cas_factor * (1 + GRNA_ACTIVITY_VARIATION);
    local_cut_rate = 1 - (1 - HOMING_PHASE_CUT_RATE)^(local_cas_factor / grna_factor);
    cut_rates = local_cut_rate;
    // Now fill in the rest of the vector.
    for (i in seqLen(NUM_GRNAS - 1)) {
        local_cas_factor = cas_factor * (1 + GRNA_ACTIVITY_VARIATION - (i + 1) * GRNA_ACTIVITY_STEP);
        local_cut_rate = 1 - (1 - HOMING_PHASE_CUT_RATE)^(local_cas_factor / grna_factor);
        // Concatenate the previous vector with the next cut rate calculated:
        cut_rates = c(cut_rates, local_cut_rate);
    }

    // Vector of possible loci.
    wt_loci = chromosome.positionsOfMutationsOfType(m1);

    // At each possible locus...
    for (i in seqAlong(wt_loci))
        // Check to see if cas9 cuts...
        if (runif(1) < cut_rates[i])
            // Convert the locus temporarily to an m5,
            // representing that this site is being cut.
            chromosome.addNewDrawnMutation(m5, wt_loci[i]);

    // If any cuts were made...
    if (chromosome.countOfMutationsOfType(m5)) {
        // Determine how extreme the cuts are relative to the target package (the drive).
        cut_loci = chromosome.positionsOfMutationsOfType(m5);
        leftmost_cut_index = cut_loci[0];
        rightmost_cut_index = cut_loci[size(cut_loci) - 1];
        // Sections that have already been cut out of the chromosome
        // also contribute to the size of the cut section.
        missing_loci = chromosome.positionsOfMutationsOfType(m6);
        // Adjusted indecies are offsets from the full span of the possible cut loci.
        adjusted_left_index = leftmost_cut_index - sum(missing_loci < leftmost_cut_index);
        rightmost_cut_index = rightmost_cut_index + sum(missing_loci > rightmost_cut_index);
        adjusted_right_index = NUM_GRNAS - 1 - rightmost_cut_index;

        // Rate of sucessfull homing varies depending on how well the gap matches the homology arm of the drive .
        successful_homing_rate = BASELINE_HOMING_SUCCESS_RATE * (1 - HOMING_EDGE_EFFECT * adjusted_left_index) * (1 - HOMING_EDGE_EFFECT * adjusted_right_index);

        // Check to see if homing succeeds.
        if (runif(1) < successful_homing_rate)
            for (i in seqLen(NUM_GRNAS))
                chromosome.addNewDrawnMutation(m2, i);
        else {
            // A small percentage of of individuals repair the chromosome with partial HDR,
            // resulting in the entire section of the chromosome becoming a resistance allele.
            final_partial_hdr_rate = 1 - (1 - PARTIAL_HDR_RATE) * (1 - PER_OFFSET_PARTIAL_HDR_RATE_INCREASE * adjusted_left_index) * (1 - PER_OFFSET_PARTIAL_HDR_RATE_INCREASE * adjusted_right_index);
            if (runif(1) < final_partial_hdr_rate) {
                // Rarely, partial HDR results in a total R1 allele, though only in haplolethal or recessive lethal drives:
                total_r1_rate = PARTIAL_HDR_R1_RATE * (1 + adjusted_right_index - adjusted_left_index);
                if (runif(1) < total_r1_rate & (HAPLOLETHAL_DRIVE | RECESSIVE_LETHAL_DRIVE))
                    for (i in seqLen(NUM_GRNAS))
                        chromosome.addNewDrawnMutation(m3, i);
                else
                    for (i in seqLen(NUM_GRNAS))
                        chromosome.addNewDrawnMutation(m4, i);
            }
            // If neither homing nor partial HDR occur, normal repair happens.
            else {
                // If just one cut was made, create an R1 or R2 resistance allele.
                if (chromosome.countOfMutationsOfType(m5) == 1)
                    addResistanceAllele(chromosome, cut_loci[0]);
                else {
                    // If mutlple cuts were made, leftmost site to m4 (R2),
                    // everthing else through the rightmost site to m6 (cut).
                    number_of_cuts = cut_loci[size(cut_loci) - 1] - cut_loci[0];
                    for (index in seqLen(number_of_cuts))
                        chromosome.addNewDrawnMutation(m6, cut_loci[0] + index + 1);
                    chromosome.addNewDrawnMutation(m4, cut_loci[0]);
                }
            }
        }
    }
}

//// HELPER FUNCTION TO OVERWRITE ONE GENOME WITH ANOTHER.
function (void)copy_genome(o<Genome>$ source, o<Genome>$ destination) {
    m1_loci = source.positionsOfMutationsOfType(m1);
    m2_loci = source.positionsOfMutationsOfType(m2);
    m3_loci = source.positionsOfMutationsOfType(m3);
    m4_loci = source.positionsOfMutationsOfType(m4);
    m5_loci = source.positionsOfMutationsOfType(m5);
    m6_loci = source.positionsOfMutationsOfType(m6);

    for (i in seqAlong(m1_loci))
        destination.addNewDrawnMutation(m1, m1_loci[i]);
    for (i in seqAlong(m2_loci))
        destination.addNewDrawnMutation(m2, m2_loci[i]);
    for (i in seqAlong(m3_loci))
        destination.addNewDrawnMutation(m3, m3_loci[i]);
    for (i in seqAlong(m4_loci))
        destination.addNewDrawnMutation(m4, m4_loci[i]);
    for (i in seqAlong(m5_loci))
        destination.addNewDrawnMutation(m5, m5_loci[i]);
    for (i in seqAlong(m6_loci))
        destination.addNewDrawnMutation(m6, m6_loci[i]);
}

//// GENE DRIVE IMPLEMENTATION RULES THAT OCCUR IN EVERY CHILD.
1: modifyChild() {
    // If the drive is x-linked, prevent it from being inherited on Y chromosome:
    if (X_LINKED_DRIVE) {
        if(child.sex == "M")
            copy_genome(parent2Genome2, child.genome2);
        if(child.sex == "F")
            copy_genome(parent2Genome1, child.genome2);
    }

    if (HOMING_DRIVE) {
        // Apply effects that happen in the germline.
        // First, resistance alleles form.
        if (!MALE_ONLY_PROMOTER)
            germline(childGenome1, parent1, GERMLINE_RESISTANCE_CUT_RATE);
        germline(childGenome2, parent2, GERMLINE_RESISTANCE_CUT_RATE);
        // Next, homology directed repair allows for homing to occur.
        if (!MALE_ONLY_PROMOTER)
            hdr(childGenome1, parent1);
        hdr(childGenome2, parent2);
        // Then additional resistance alleles form.
        if (!MALE_ONLY_PROMOTER)
            germline(childGenome1, parent1, LATE_GERMLINE_RESISTANCE_CUT_RATE);
        germline(childGenome2, parent2, LATE_GERMLINE_RESISTANCE_CUT_RATE);

        // Apply effects that happen in the embryo.
        if (!MALE_ONLY_PROMOTER)
            embryo(childGenome1, childGenome2, parent1);
    } // End homing block

    if (MODIFICATION_TADS_DRIVE | TADS_AUTOSOMAL_SUPPRESSION_DRIVE) {
        // Apply germline resistance
        if (!MALE_ONLY_PROMOTER)
            germline(childGenome1, parent1, GERMLINE_RESISTANCE_CUT_RATE);
        germline(childGenome2, parent2, GERMLINE_RESISTANCE_CUT_RATE);

        // If the child inherited r2 from a d/(wt or r1wt or r1) father
        while (childGenome2.countOfMutationsOfType(m4) > 0
                        & (parent2.countOfMutationsOfType(m2) == NUM_GRNAS
                        & parent2.countOfMutationsOfType(m4) == 0)) {
            // Half the time, loop back and give the child drive instead
            if (runif(1) < 0.5)
                for (i in seqLen(NUM_GRNAS))
                    childGenome2.addNewDrawnMutation(m2, i);
            else {
                // Otherwise, recreate the non-drive chromosome before germline resistance
                // and undergo germline resistance again - only exit loop if r2 doesn't result
                if (parent2Genome1.countOfMutationsOfType(m2) == NUM_GRNAS)
                    copy_genome(parent2Genome2, childGenome2);
                if (parent2Genome2.countOfMutationsOfType(m2) == NUM_GRNAS)
                    copy_genome(parent2Genome1, childGenome2);
                germline(childGenome2, parent2, GERMLINE_RESISTANCE_CUT_RATE);
            }
        } // End while loop

        // Fathers who were r2 heterozygotes cannot pass on an r2 allele. If child currently has
        // father's r2 chromosome, reconstruct the father's other chromosome and give this to the child instead.
        if (childGenome2.countOfMutationsOfType(m4) > 0) {
            // If the r2 allele was the father's chromosome 1, pass his chromosome 2 to the child.
            if (parent2Genome1.countOfMutationsOfType(m4) > 0)
                copy_genome(parent2Genome2, childGenome2);
             // If the r2 allele was the father's chromosome 2, pass his chromosome 1 to the child.
            if (parent2Genome2.countOfMutationsOfType(m4) > 0)
                copy_genome(parent2Genome1, childGenome2);
        }

        if (!MALE_ONLY_PROMOTER)
            embryo(childGenome1, childGenome2, parent1);
    } // End TADS block

    if (!HOMING_DRIVE & !MODIFICATION_TADS_DRIVE & !TADS_AUTOSOMAL_SUPPRESSION_DRIVE) {
        // Apply effects that happen in the germline.
        if (!MALE_ONLY_PROMOTER)
            germline(childGenome1, parent1, GERMLINE_RESISTANCE_CUT_RATE);
        germline(childGenome2, parent2, GERMLINE_RESISTANCE_CUT_RATE);

        // Apply effects that happen in the embryo.
        if (!MALE_ONLY_PROMOTER)
            embryo(childGenome1, childGenome2, parent1);
    } //end not homing/tads modification block

    // If the drive is x-linked, prevent gene drive mechanics on Y chromosome by resetting it:
    if (X_LINKED_DRIVE)
        if(child.sex == "M")
            copy_genome(parent2Genome2, child.genome2);

    // Offspring may be non viable offspring if drive
    // is haplolethal or recesive lethal.
    // Booleans describing presence of R2 allele:
    res_2_c_1 = childGenome1.countOfMutationsOfType(m4) > 0;
    res_2_c_2 = childGenome2.countOfMutationsOfType(m4) > 0;
    // If drive is haplolethal:
    // Offspring not viable if r2 on either chromosome.
    if (HAPLOLETHAL_DRIVE & (res_2_c_1 | res_2_c_2))
        return F;
    // If drive is recessive lethal:
    // Offspring not viable if r2 on both chromosomes.
    if (RECESSIVE_LETHAL_DRIVE & res_2_c_1 & res_2_c_2)
        return F;

    return T;
}

//// RULES FOR FITNESS BASED ON GENOTYPE.
function (f$)genotypeFitness(o<Individual>$ ind) {
    // Representation of the value of the two chromosomes.
    c1_value = 1.0;
    c2_value = 1.0;

    // Check both chromosomes for drive and type 2 resistance allele.
    // These are the only variants that affect fitness.
    drive_on_1 = ind.genome1.countOfMutationsOfType(m2) == NUM_GRNAS;
    drive_on_2 = ind.genome2.countOfMutationsOfType(m2) == NUM_GRNAS;
    res2_on_1 = ind.genome1.countOfMutationsOfType(m4) > 0;
    res2_on_2 = ind.genome2.countOfMutationsOfType(m4) > 0;

    // Check both chromosomes for the drive.
    if (drive_on_1)
        c1_value = DRIVE_FITNESS_VALUE;
    if (drive_on_2)
        c2_value = DRIVE_FITNESS_VALUE;

    // Check both chromosomes for resistance allele.
    if (res2_on_1)
        c1_value = R2_FITNESS_VALUE;
    if (res2_on_2)
        c2_value = R2_FITNESS_VALUE;

    // If the drive is a gene function targeting drive, two copies of either
    // the gene or r2 incur an associated fitness cost.
    if (GENE_DISRUPTION_DRIVE)
        if ((drive_on_1 | res2_on_1) & (drive_on_2 | res2_on_2))
            return sqrt(c1_value * c2_value) - (1 - GENE_DISRUPTION_DRIVE_FITNESS_MULTIPLIER);

    // Return fitness for individual with this genotype.
    return sqrt(c1_value * c2_value);
}

//// REPRODUCTION RULES.
reproduction(NULL, "F") {
    // There are only two individuals; the female's mate is the only male.
    mate = subpop.sampleIndividuals(1, sex="M");

    // The pair generates CAPACITY number of offspring.
    for (i in seqLen(CAPACITY)) {
        // Add offspring to the subpopulation.
        offspring = subpop.addCrossed(individual, mate);
    }
}

//// AGE BASED SURVIVAL RULES.
late() {
    sim.subpopulations.individuals.fitnessScaling = 0;
}

//// START THE SIMULATION BY THE TWO INDIVIDUALS.
1 {
    // Start with wt two individuals.
    sim.addSubpop("p1", 2);
    for (i in seqLen(NUM_GRNAS))
        p1.individuals.genomes.addNewDrawnMutation(m1, i);

    starting_pair = p1.individuals;
    female = (starting_pair.sex=="F");
    male = (starting_pair.sex=="M");

    // If the MALE_ONLY_DROP config value is set, the male is heterozygous for drive,
    // otherwise start the female as heterozygous for the drive.
    if (MALE_ONLY_DROP)
        for (i in seqLen(NUM_GRNAS))
            starting_pair[male].genome1.addNewDrawnMutation(m2, i);
    else
        for (i in seqLen(NUM_GRNAS))
            starting_pair[female].genome1.addNewDrawnMutation(m2, i);
}

//// PROGRAM OUTPUT.
2 late() {
    // Calculate rates that we are intersted in:
    num_wt = 0;
    num_dr = 0;
    num_complete_r1 = 0;
    num_partial_r1 = 0;
    num_complete_r2 = 0;
    num_partial_r2 = 0;
    all = sim.subpopulations.individuals;
    num_wt = sum(all.genomes.countOfMutationsOfType(m1) == NUM_GRNAS);
    num_dr = sum(all.genomes.countOfMutationsOfType(m2) == NUM_GRNAS);
    num_complete_r1 = sum(all.genomes.countOfMutationsOfType(m3) == NUM_GRNAS);
    num_partial_r1 = sum(all.genomes.countOfMutationsOfType(m3) > 0
                       & all.genomes.countOfMutationsOfType(m1) > 0
                       & all.genomes.countOfMutationsOfType(m4) == 0);
    num_complete_r2 = sum(all.genomes.countOfMutationsOfType(m4) > 0
                        & all.genomes.countOfMutationsOfType(m1) == 0);
    num_partial_r2 = sum(all.genomes.countOfMutationsOfType(m4) > 0
                       & all.genomes.countOfMutationsOfType(m1) > 0);
    num_has_drive = sum(all.genome1.countOfMutationsOfType(m2) == NUM_GRNAS
                      | all.genome2.countOfMutationsOfType(m2) == NUM_GRNAS);

    rate_wt = num_wt / (2 * size(all));
    rate_dr = num_dr / (2 * size(all));
    rate_complete_r1 = num_complete_r1 / (2 * size(all));
    rate_partial_r1 = num_partial_r1 / (2 * size(all));
    rate_complete_r2 = num_complete_r2 / (2 * size(all));
    rate_partial_r2 = num_partial_r2 / (2 * size(all));
    rate_has_drive = num_has_drive / (size(all));

    // Output for humans to look at:
    cat("Rates in " + p1.individualCount + " individuals in generation " + paste(asInteger(sim.generation) - 1, "") + ":\n");
    cat("wt: " + rate_wt + "\tdr: " + rate_dr + "\tr1: " + rate_complete_r1 + "\tpart r1: " + rate_partial_r1 +
            "\tr2: " + rate_complete_r2 + "\tpart r2: " + rate_partial_r2 + "\t%inds with dr: " + rate_has_drive + "\n");
    if (num_dr)
        cat("Number of drive alleles present: " + num_dr + "\n");

    // Output for python to look at:
    cat("PYTHON:: " + rate_wt + " " + rate_dr + " " + rate_complete_r1 + " " + rate_partial_r1 + " " +
            rate_complete_r2 +" " + rate_partial_r2 + " " + rate_has_drive + " " +
            paste(asInteger(sim.generation) - 1, "") + " " + p1.individualCount + "\n\n");

    // End condition for investigating when drive surpases a threshold:
//    if ((sim.generation > 12 & rate_dr == 0.0) | rate_dr > 0.1)
//        sim.simulationFinished();

    // Condition for ending simulation when drive takes over or dies out:
//    if (rate_has_drive >= 0.99 | p1.individualCount == 0 | (rate_has_drive == 0 & sim.generation > 12))
//        sim.simulationFinished();
}

//// PROGRAM END CONDITION.
2 late() {
    sim.simulationFinished();
}
